Worst case Time Complexity :

Task 0-

Worst case time complexity is Big O(1)
Time complexity for this code snippet is Big O(1) because we are not iterating any element from input calls or texts. We are just accessing first and last value from list.


Task 1 -

def unique_num(number_file):
    with open(number_file, 'r') as f:
        reader = csv.reader(f)
        numbers_list = list(reader)
        for number in numbers_list:
        	number_set.add(number[0])
        	number_set.add(number[1])

unique_num('texts.csv')
unique_num('calls.csv')
print (f"There are {len(number_set)} different


Time Complexity :

Worst case time complexity is Big O(n^2) -
Time complexity of this code snippet is Big O(n^2) because we are iterating over each input element (time complexity - Big O(n)) and then we are adding element in set. 
For the worst case adding element in set can go upto no of inputs so time complexity can go upto Big O(n). 
time complexity for adding two set items : O(n + n) = Big O(2n)
time complexity for len() function : O(1)

Net time complexity =  Big O(n*2n) + Big O(n*2n) + Big O(1)
 = Big O(2n^2)
or Big O(n^2)

So worst case complexity is Order of n^2 i.e Big O(n^2) 


Task 2 - 

with open('calls.csv', 'r') as f:
    reader = csv.reader(f)
    calls = list(reader)
    call_dict = {}
    call_dict = defaultdict(lambda: 0, call_dict)
    max_Value = 0;
    for call in calls:
    	call_dict[call[0]] += int(call[3])
    	call_dict[call[1]] += int(call[3])
    	
    	if(call_dict[call[0]] > max_Value):
    		max_Value = call_dict[call[0]]
    		key_max = call[0]
    	if(call_dict[call[1]] > max_Value):
    		max_Value = call_dict[call[1]]
    		key_max = call[1]

Time Complexity:

Worst case time complexity can go upto Big O(n^2). We are iterating  over each input element in the list. For each iteration we are adding element in the dictionary. For adding an element in dictionary Avg. time complexity is Big O(1) but taking its worst case it can go upto Big O(m) where m is no. of elements in dictionary. While considering worst case that all the input elements can be added in dictionary its complexity can be Big O(n).
For finding max_value and key_max there are checks which have Big O(1) complexity and getting value from dictionary in Worst Case is same as in adding i.e Big O(n).

So, time complexity for each iteration - 	Big O(n)
for addition and get value time complexity -	Big O(n)
for all checks time complexity-			Big O(1)

Net complexity 	- Big O(n*2n) + Big O(n*1) + Big O (n*2n)
		- Big O(n^2)

So worst case complexity is Order of n i.e O(n^2)



Task 3 -

for call in calls:
		if(call[0].startswith('(080)')) :
			count_all += 1
			if(call[1].startswith('(')):
				string = re.search(r"(\([0-9]+\))",call[1])
				prefix = string.group(1)
				if(prefix == '(080)'):
					count_bnglr += 1
			elif(call[1][0] == '7' or call[1][0] == '8' or call[1][0] == '9'):
				prefix = call[1][0:4]
			elif(call[1].startswith('140')):
				prefix = '140'
			numbers_set.add(prefix)
	return count_bnglr, count_all

Time Complexity:

Worst case time complexity of this code snippet is Big O(n^2). We are iterating for each input element in the list. so time complexity for loop is Big O(n). Next we are doing checks and string operations like .startswith or re.search worst case complexity of it will be Big O(c) where c is constant as string is of constant length.
now adding the prefix in set can go upto worst case complexity of Big O(n).
During sorting the number set, in worst case time complexity can go for order of n*logn i.e Big O(nlogn)
Net Complexity of Part A - Big O(n*c) + Big O(n*n) + Big O(nlogn)   ( c is constant)
			-  Big O(n) + Big O(n^2) + Big O(nlogn)
			-  Big O(n^2)

Complexity of Part B - it does not include complexity for adding number in set and sorting the number set. Rest all operations are of constant time complexity
So net complexity - Big O(n*c)
		  - Big O(n)
			
So worst case complexity for Part A is order of n^2 i.e Big O(n^2)
Worst case complexity for Part B is order of n i.e Big O(n) 



Task 4 -

def get_telemarketers(remove_set,calls_list):
	number_set = set()
	for number in calls_list:
		if(number[0] not in remove_set):
			number_set.add(number[0])
	return number_set

def get_removable_telemarketers(texts_list,calls_list):
	number_set = set()
	for number in texts_list:
		number_set.add(number[0])
		number_set.add(number[1])
	for number in calls_list:
		number_set.add(number[1])
	return number_set


Time Complexity :

function get_removable_telemarketers : We are iterating over each input element in both texts as well as calls. So for each loop complexity is Big O(n). Inside the loop we are adding numbers in set. As explained earlier worst case complexity for adding element in set is Big O(n).

Complexity 	- Big O(n*2n) + Big(n*n)
		- Big O(n^2)

function get_telemarketers : For each input element we are checking whether element exists in set and then adding element in the set. So in worst case :

Time complexity for 'for' loop - Big O(n)
Time complexity for not in set - Big O(n)
Time complexity for adding element in set - Big O (n)
Complexity 	- Big O(n*2n)
		- Big O(n^2)

Complexity for sort function over set is Big O(nlogn)
Net Complexity is - Big O(n^2) + Big O(n^2) + Big O(nlogn)
		  - Big O(n^2)	

So worst case time complexity will be O(n^2)